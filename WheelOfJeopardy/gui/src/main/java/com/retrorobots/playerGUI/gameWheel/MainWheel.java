/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.retrorobots.playerGUI.gameWheel;

import java.awt.Color;
import java.awt.Font;
import java.awt.Polygon;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author KeeganRiley
 */
public class MainWheel extends javax.swing.JPanel {
    
    private Wheel wheel;
    private SelectionArrow arrow;

    /**
     * Creates new form MainWheel
     */
    public MainWheel(List<String> categories) throws Exception {
        initComponents();
        makeWheel(categories);
    }
    
    private void makeWheel(List<String> categories) throws Exception {
        wheel = new Wheel(categories);
        wheel.setLayout(null);
        arrow = new SelectionArrow();
        arrow.setLayout(null);
        this.setLayout(null);
        this.add(wheel);
        this.add(arrow);
    }
    
    public void startSpinAsync(double speed, int direction, double deceleration) throws Exception {
        wheel.spinStartAsync(speed, direction, deceleration);
    }
    
    public void spinStop() {
        wheel.spinStop();
    }
    
    @Override
    public void setBounds(int x, int y, int width, int height) {
        super.setBounds(x, y, width, height);
        wheel.setBounds(0, 0, width - arrow.getArrowWidth(), height);
        arrow.setBounds(width - arrow.getArrowWidth(), 0, arrow.getArrowWidth(), height);
    }
    
    public void hasBorders(boolean borders) {
        wheel.hasBorders(borders);
    }
    
    public int getRadius() {
        return wheel.getRadius();
    }
    
    public double getRotationAngle() {
        return wheel.getRotationAngle();
    }
    
    public void setRotationAngle(double rotationAngle) {
        wheel.setRotationAngle(rotationAngle);
    }
    
    public Font getWheelFont() {
        return wheel.getFont();
    }
    
    public void setWheelFont(Font font) {
        super.setFont(font);
        wheel.setFont(font);
    }
    
    public List<String> getListOfStrings() {
        return wheel.getListOfStrings();
    }
    
    public void setListOfStrings(List<String> list) throws Exception {
        wheel.setListOfStrings(list);
    }
    
    public double getSpinSpeed() {
        return wheel.getSpinSpeed();
    }
    
    public double getMaxSpinSpeed() {
        return wheel.getMaxSpinSpeed();
    }
    
    public void setMaxSpinSpeed(double speed) {
        wheel.setMaxSpinSpeed(speed);
    }
    
    public double getSpinDeceleration() {
        return wheel.getSpinDeceleration();
    }
    
    public void setSpinDeceleration(double deceleration) throws Exception {
        wheel.setSpinDeceleration(deceleration);
    }
    
    public List<Color> getColorScheme() {
        return wheel.getColorScheme();
    }
    
    public void addColor(Color color) {
        wheel.addColor(color);
    }
    
    public String getSelectedString() {
        return wheel.getSelectedString();
    }
    
    public boolean isSpinning() {
        return wheel.isSpinning();
    }
    
    public void setShape(Wheel.Shape shape) {
        wheel.setShape(shape);
    }
    
    public double getArrowWidth() {
        return arrow.getArrowWidth();
    }
    
    public void setArrowWidth(int width) {
        arrow.setArrowWidth(width);
        this.setBounds(this.getX(), this.getY(), this.getWidth(), this.getHeight());
    }
    
    public double getArrowHeight() {
        return arrow.getArrowHeight();
    }
    
    public void setArrowHeight(int height) {
        arrow.setArrowHeight(height);
    }
    
    public Polygon getArrowPolygon() {
        return arrow.getPolygon();
    }
    
    public void setArrowPolygon(Polygon polygon) {
        arrow.setPolygon(polygon);
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
